{"version":3,"sources":["assets/audio/352666__foolboymedia__up-chime-2.mp3","components/Steps.js","components/Timer.js","components/Pomodoro.js","components/App.js","index.js"],"names":["module","exports","Steps","this","props","cicle","map","step","index","itemClass","baseItemClass","className","key","createStepsList","React","Component","Timer","hours","slice","minutes","seconds","onStartClick","onStopClick","onResetClick","formatTime","type","onClick","CICLE","DISPLAY_NAMES","Map","set","DURATIONS","Pomodoro","state","get","tensOfSeconds","interval","audio","Audio","require","clearInterval","setInterval","setState","onTimerCompleted","pause","currentTime","play","Notification","length","x","App","requestPermission","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.f34f9642.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/352666__foolboymedia__up-chime-2.0be7d612.mp3\";","/**\n * IMPORTS\n */\nimport React from 'react';\n\n\n/**\n * CODE\n */\nclass Steps extends React.Component\n{\n    /**\n     * I create the steps list.\n     *\n     * :returns: list with the steps\n     * :rtype: React.ReactNode\n     */\n    createStepsList ()\n    {\n        // define css classes\n        const baseItemClass = 'list-group-item mt-2';\n        const notStartedItemClass = baseItemClass + ' bg-secondary';\n        const activeItemClass = baseItemClass + ' bg-warning';\n        const completedItemClass = baseItemClass + ' bg-success';\n\n        // return a list of steps with proper css classes\n        return this.props.cicle.map((step, index) =>\n        {\n            let itemClass;\n\n            // step already completed: mark it as completed\n            if (index < this.props.step)\n            {\n                itemClass = completedItemClass;\n            }\n\n            // step ongoing: mark it as ongoing\n            else if (index === this.props.step)\n            {\n                itemClass = activeItemClass;\n            }\n\n            // step not started: mark it as not started\n            else\n            {\n                itemClass = notStartedItemClass;\n            }\n\n            // return the list item with the proper css classes\n            return (\n                <li className={itemClass} key={index}>\n                    {step}\n                </li>\n            );\n        });\n    }\n\n\n    /**\n     * I render this component.\n     *\n     * :returns: content to be rendered\n     * :rtype: React.ReactNode\n     */\n    render ()\n    {\n        return (\n            <div className=\"d-flex\">\n                <ul className=\"list-group list-group-horizontal mx-auto justify-content-center\">\n                    {this.createStepsList()}\n                </ul>\n            </div>\n        );\n    }\n}\n\n\n/**\n * EXPORTS\n */\nexport default Steps;\n","/**\n * IMPORTS\n */\nimport React from 'react';\n\n\n/**\n * CODE\n */\nclass Timer extends React.Component\n{\n    /**\n     * I format the timer values to a human-readable format with two digits for\n     * hours, minutes and seconds.\n     */\n    formatTime ()\n    {\n        const hours = ('0' + this.props.hours).slice(-2);\n        const minutes = ('0' + this.props.minutes).slice(-2);\n        const seconds = ('0' + this.props.seconds).slice(-2);\n\n        return `${hours}:${minutes}:${seconds}`;\n    }\n\n\n    /**\n     * I handle the 'start' button click.\n     */\n    onStartClick ()\n    {\n        this.props.onStartClick();\n    }\n\n\n    /**\n     * I handle the 'stop' button click.\n     */\n    onStopClick ()\n    {\n        this.props.onStopClick();\n    }\n\n\n    /**\n     * I handle the 'reset' button click.\n     */\n    onResetClick ()\n    {\n        this.props.onResetClick();\n    }\n\n\n    /**\n     * I render this component\n     */\n    render()\n    {\n        return (\n            <div className=\"container text-center\">\n                <div className=\"display-3 m-5\">\n                    {this.formatTime()}\n                </div>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"btn-group col-sm-12\">\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary col-md-4\"\n                                onClick={() => {this.onStartClick()}}\n                            >\n                                Start\n                            </button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary col-md-4\"\n                                onClick={() => {this.onStopClick()}}\n                            >\n                                Stop\n                            </button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary col-md-4\"\n                                onClick={() => {this.onResetClick()}}\n                            >\n                                Reset\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n/**\n * EXPORTS\n */\nexport default Timer;\n","/**\n * IMPORTS\n */\nimport React from 'react';\nimport Steps from './Steps';\nimport Timer from './Timer';\n\n\n/**\n * CONSTANTS AND DEFINITIONS\n */\n\n// steps names\nconst SHORT_BREAK = 'shortBreak';\nconst LONG_BREAK = 'longBreak';\nconst POMODORO = 'pomodoro';\n\n// cicle of steps to follow\nconst CICLE = [\n    POMODORO,\n    SHORT_BREAK,\n    POMODORO,\n    SHORT_BREAK,\n    POMODORO,\n    SHORT_BREAK,\n    POMODORO,\n    LONG_BREAK\n];\n\n// I convert a step name into a string to be displayed to the user\nconst DISPLAY_NAMES = new Map();\nDISPLAY_NAMES.set(POMODORO, 'Pomodoro');\nDISPLAY_NAMES.set(LONG_BREAK, 'Long break');\nDISPLAY_NAMES.set(SHORT_BREAK, 'Short break');\n\n// I define the duration of each step\nconst DURATIONS = new Map();\nDURATIONS.set(SHORT_BREAK,\n              {\n                  hours: 0,\n                  minutes: 5,\n                  seconds: 0\n              });\nDURATIONS.set(LONG_BREAK,\n              {\n                  hours: 0,\n                  minutes: 15,\n                  seconds: 0\n              });\nDURATIONS.set(POMODORO,\n              {\n                  hours: 0,\n                  minutes: 25,\n                  seconds: 0\n              });\n\n\n/**\n * CODE\n */\nclass Pomodoro extends React.Component\n{\n    // FIXME: destruct the props.\n    //\n    /**\n     * I initialize myself.\n     *\n     * :param props: component properties\n     * :type  props: object\n     */\n    constructor(props)\n    {\n        super(props);\n\n        // set initial state\n        this.state = {\n            step: 0,\n            hours: DURATIONS.get(CICLE[0]).hours,\n            minutes: DURATIONS.get(CICLE[0]).minutes,\n            seconds: DURATIONS.get(CICLE[0]).seconds,\n            // FIXME: remove this from state. No need to update the component\n            // if this changes.\n            tensOfSeconds: 0\n        };\n\n        // a 'null' interval means there's no timer running\n        this.interval = null;\n\n        // audio object used to notify the user the end of a step\n        this.audio = new Audio(\n            require('../assets/audio/352666__foolboymedia__up-chime-2.mp3')\n        );\n    }\n\n\n    /**\n     * I handle the 'stop' button click.\n     *\n     * :returns: nothing\n     * :rtype: undefined\n     */\n    onStopClick ()\n    {\n        clearInterval(this.interval);\n        this.interval = null;\n    }\n\n\n    /**\n     * I handle the 'start' button click.\n     *\n     * :returns: nothing\n     * :rtype: undefined\n     */\n    onStartClick ()\n    {\n        // timer already running: return\n        if (this.interval !== null)\n        {\n            return;\n        }\n\n        // timer not yet running: start it and update it every 100 milliseconds\n        this.interval = setInterval(() =>\n        {\n            // timer completed: update step and return\n            if (this.state.tensOfSeconds === 0\n                && this.state.seconds === 0\n                && this.state.minutes === 0\n                && this.state.hours === 0)\n            {\n                this.onTimerCompleted();\n                return;\n            }\n\n            // current second not over: subtract 1 from tensOfSeconds\n            if (this.state.tensOfSeconds > 0)\n            {\n                this.setState({tensOfSeconds: this.state.tensOfSeconds - 1});\n            }\n\n            // current second is over: go to the beginning of previous second\n            else if (this.state.seconds > 0)\n            {\n                this.setState({\n                    tensOfSeconds: 9,\n                    seconds: this.state.seconds - 1\n                });\n            }\n\n            // current minute is over: go to the beginning of previous minute\n            else if (this.state.minutes > 0)\n            {\n                this.setState({\n                    tensOfSeconds: 9,\n                    seconds: 59,\n                    minutes: this.state.minutes - 1\n                });\n            }\n\n            // current hour is over: go to the beginning of the previous hour\n            else if (this.state.hours > 0)\n            {\n                this.setState({\n                    tensOfSeconds: 9,\n                    seconds: 59,\n                    minutes: 59,\n                    hours: this.state.hours - 1\n                });\n            }\n        }, 100);\n    }\n\n\n    /**\n     * I update the state when the timer is completed.\n     *\n     * :returns: nothing\n     * :rtype: undefined\n     */\n    onTimerCompleted ()\n    {\n        // emit sound alert\n        this.audio.pause();\n        this.audio.currentTime = 0;\n        this.audio.play();\n\n        // display notification\n        new Notification(`The ${CICLE[this.state.step]} is over`);\n\n        // cancel the current interval\n        clearInterval(this.interval);\n        this.interval = null;\n\n        // all steps are over: go to first step and return\n        if (this.state.step + 1 === CICLE.length)\n        {\n            this.setState({\n                step: 0,\n                hours: DURATIONS.get(CICLE[0]).hours,\n                minutes: DURATIONS.get(CICLE[0]).minutes,\n                seconds: DURATIONS.get(CICLE[0]).seconds,\n                tensOfSeconds: 0\n            });\n            return;\n        }\n\n        // not all steps are over: go to the next one\n        this.setState({\n            step: this.state.step + 1,\n            hours: DURATIONS.get(CICLE[this.state.step + 1]).hours,\n            minutes: DURATIONS.get(CICLE[this.state.step + 1]).minutes,\n            seconds: DURATIONS.get(CICLE[this.state.step + 1]).seconds,\n            tensOfSeconds: 0\n        });\n    }\n\n\n    /**\n     * I handle the 'reset' button click.\n     *\n     * :returns: nothing\n     * :rtype: undefined\n     */\n    onResetClick ()\n    {\n        // cancel current interval\n        clearInterval(this.interval);\n        this.interval = null;\n\n        // go back to the beginning of the first step\n        this.setState({\n            step: 0,\n            hours: DURATIONS.get(CICLE[0]).hours,\n            minutes: DURATIONS.get(CICLE[0]).minutes,\n            seconds: DURATIONS.get(CICLE[0]).seconds,\n            tensOfSeconds: 0\n        });\n    }\n\n\n    /**\n     * I render this component.\n     *\n     * :returns: content to be rendered.\n     * :rtype: React.ReactNode\n     */\n    render ()\n    {\n        return (\n            <div>\n                <Steps\n                    cicle={CICLE.map((x) => DISPLAY_NAMES.get(x))}\n                    step={this.state.step}\n                />\n                <Timer\n                    hours={this.state.hours}\n                    minutes={this.state.minutes}\n                    seconds={this.state.seconds}\n                    tensOfSeconds={this.state.tensOfSeconds}\n                    onStartClick={() => {this.onStartClick()}}\n                    onStopClick={() => {this.onStopClick()}}\n                    onResetClick={() => {this.onResetClick()}}\n                />\n            </div>\n        );\n    }\n}\n\n\n/**\n * EXPORTS\n */\nexport default Pomodoro;\n","/**\n * IMPORTS\n */\nimport React from 'react';\nimport Pomodoro from './Pomodoro';\n\n\n/**\n * CODE\n */\nclass App extends React.Component\n{\n    /**\n     * I require permission to send notifications to the user.\n     *\n     * :returns: nothing\n     * :rtype: undefined\n     */\n    componentWillMount ()\n    {\n        Notification.requestPermission();\n    }\n\n\n    /**\n     * I render the application.\n     *\n     * :returns: the content do be rendered\n     * :rtype: React.ReactNode\n     */\n    render ()\n    {\n        return (\n            <div>\n                <Pomodoro />\n            </div>\n        );\n    }\n}\n\n\n/**\n * EXPORTS\n */\nexport default App;\n","import React from 'react';\n/**\n * IMPORTS\n */\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\n/**\n * CODE\n */\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}